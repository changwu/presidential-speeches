#!/usr/bin/env python3

"""extract-snippets: Extract snippets of video/audio, given timings.

Usage:

  ./extract-snippets -i INPUT_FILE

Read the entries in INPUT_FILE and write out numbered snippets to the
directory ./snippets (which must exist).

Here is an example input file consisting of three entries (indented by
two spaces here, but they wouldn't be indented in real life of course):

  * trump-bedminster-2021-07-audio.mp3
  
    00:24.00  1.00  I wanted to attack Iran
    01:25.00  1.00  he wanted to attack Iran
  
    (Imagine some random note here.)

  * 2017-02-28-address-joint-session-congress.mp4
  
    17:51.99  0.68  who support Iran's ballistic missile program

  # This is also a comment line, albeit of a different kind.

  * video/2017-09-19-address-united-nations-general-assembly.mp4
  
    17:31.00  0.70  in this room.  The Iranian government masks
    17:57.00  0.70  The longest-suffering victims of Iran’s leaders are
    18:05.00  0.70  Rather than use its resources to improve Iranian lives
    18:23.00  0.70  which rightly belongs to Iran’s people
    19:08.00  0.70  The Iran Deal was one of the worst
    19:31.00  0.70  join us in demanding that Iran’s government
    19:47.00  0.70  above all, Iran’s government
    20:00.00  0.70  good people of Iran want change
    20:08.00  0.70  that Iran’s
    20:45.00  0.70  will the Iranian people
    21:00.00  0.70  The Iranian regime’s support for terror
  
    NOTE: ERROR IN TRANSCRIPT: "the day will come when the [then the
    transcript has the word 'Iranian' here, but that word is not
    actually said] people will face a choice"

Spacing can be variable; only non-whitespace matters.  The format
works as it looks:

  - A line starting with "* " names a video or audio source file.

  - Whitespace then numbers is a timing line: start time, duration,
    then ignored text (the text is just there to help the human).

  - A line starting with "#" (maybe preceded by whitespace) is a
    comment and is ignored.

  - Any all-whitespace is ignored.

  - Any other kind of line is an error.

The output snippets are written into the directory ./snippets in the
order that they occur in the input, and each output file is given an
ordering prefix followed by a timing-and-duration component (with
colons converted to underscores, out of respect for our friends using
Microsoft Windows).  Thus, the above three example entries would
produce these output files:

  ./snippets/01-00_24.00-1.00-trump-bedminster-2021-07-audio.mp3
  ./snippets/02-01_25.00-1.00-trump-bedminster-2021-07-audio.mp3
  ./snippets/03-17_51.99-0.68-2017-02-28-address-joint-session-congress.mp4
  ./snippets/04-17_31.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/05-17_57.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/06-18_05.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/07-18_23.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/08-19_08.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/09-19_31.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/10-19_47.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/11-20_00.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/12-20_08.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/13-20_45.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
  ./snippets/14-21_00.00-0.70-2017-09-19-address-united-nations-general-assembly.mp4
"""

import sys
import os
import re
import getopt
import subprocess
import math

SOURCE_RE = re.compile("^\*\s+([a-zA-Z0-9/-]+\.[a-zA-Z0-9]{3})\s*$")
TIMING_RE = re.compile("^\s+([0-9:.]+)\s+([0-9.]+)\s+.*$")
COMMENT_RE = re.compile("^\s*#.*$")
BLANK_LINE_RE = re.compile("^\s*$")

def get_schedule(infile):
    """Read INFILE (string -- a file name) and return a list of the form:
      [[source_name1, timing1, duration1],
       [source_name2, timing2, duration2],
       ...]
    Yes, a class would be more Pythonic.  But you know what's the most
    Pythonic thing of all?  Shipping."""
    fp = open(infile, "r")
    ret_list = []
    this_elt = None

    # TODO: There's a bug in this parser; this old output makes it clear:
    #
    #   item: ['audio/trump-bedminster-2021-07-audio.mp3', '00:24.00', '0.70', '01:25.00', '0.70']
    #   item: ['video/2017-02-28-address-joint-session-congress.mp4', '17:51.99', '0.68']
    #   item: ['video/2017-09-19-address-united-nations-general-assembly.mp4', '17:31.00', '0.70', '17:57.00', '0.70', '18:05.00', '0.70', '18:23.00', '0.70', '19:08.00', '0.70', '19:31.00', '0.70', '19:47.00', '0.70', '20:00.00', '0.70', '20:08.00', '0.70', '20:45.00', '0.70', '21:00.00', '0.70']
    #   item: ['video/2017-12-18-remarks-national-security-strategy.mp4', '09:01.00', '0.70', '13:22.00', '0.70', '13:35.00', '0.70']
    #   item: ['video/2018-01-26-address-world-economic-forum.mp4', '10:17.00', '0.70', '10:20.00', '0.70']
    #   item: ['video/2018-01-30-state-union-address.mp4', '67:26.00', '0.70', '67:37.00', '0.70', '68:01.00', '0.70']
    #   item: ['video/2018-02-23-remarks-conservative-political-action.mp4', '25:15.00', '0.70']
    #   item: ['video/2018-07-24-speech-veterans-foreign-wars-national-convention.mp4', '12:47.00', '0.70', '12:57.00', '0.70']
    #   item: ['video/2018-09-25-address-73rd-session-united-nations-general.mp4', '09:42.00', '0.70', '09:44.00', '0.70', '10:00.00', '0.70', '10:14.00', '0.70', '10:21.00', '0.70', '10:38.00', '0.70', '10:59.00', '0.70', '11:07.00', '0.70', '11:11.00', '0.70', '11:15.00', '0.70', '11:58.00', '0.70', '12:08.00', '0.70', '12:44.00', '0.70', '12:52.00', '0.70']
    #   item: ['video/2019-02-05-state-union-address.mp4', '68:52.00', '0.70', '69:10.00', '0.70']
    #   item: ['video/2019-09-24-remarks-united-nations-general-assembly.mp4', '12:42.00', '0.70', '12:52.00', '0.70', '12:56.00', '0.70', '13:19.00', '0.70', '13:24.00', '0.70', '14:00.00', '0.70', '14:08.00', '0.70', '14:21.00', '0.70', '14:25.00', '0.70', '14:34.00', '0.70', '14:56.00', '0.70', '16:18.00', '0.70', '16:37.00', '0.70', '16:51.00', '0.70', '16:55.00', '0.70', '17:43.00', '0.70']
    #   item: ['video/2019-09-25-press-conference.mp4', '20:38.00', '0.70']
    #   item: ['video/2020-01-03-remarks-killing-qasem-soleimani.mp4', '02:14.00', '0.70', '02:33.00', '0.70', '02:43.00', '0.70', '02:56.00', '0.70', '03:34.00', '0.70']
    #   item: ['video/2020-01-08-statement-iran.mp4', '00:04.00', '0.70', '00:26.00', '0.70', '00:45.00', '0.70', '01:23.00', '0.70', '01:31.00', '0.70', '03:07.00', '0.70', '03:26.00', '0.70', '03:34.00', '0.70', '03:40.00', '0.70', '03:45.00', '0.70', '03:56.00', '0.70', '03:59.00', '0.70', '04:24.00', '0.70', '05:01.00', '0.70', '05:10.00', '0.70', '05:15.00', '0.70', '05:36.00', '0.70', '05:43.00', '0.70', '05:51.00', '0.70', '05:58.00', '0.70', '06:05.00', '0.70', '06:15.00', '0.70', '08:36.00', '0.70', '08:40.00', '0.70', '08:51.00', '0.70']
    #   item: ['video/2020-02-04-state-union-address.mp4', '67:56.00', '0.70', '69:16.00', '0.70', '69:20.00', '0.70', '69:33.00', '0.70']
    #   item: ['video/2020-06-20-campaign-rally-tulsa-oklahoma.mp4', '66:56.00', '0.70', '67:13.00', '0.70', '67:43.00', '0.70']
    #   item: ['video/2021-01-19-farewell-address.mp4', '11:29.00', '0.70', '11:32.00', '0.70']

    for line in fp:
        line = line.rstrip()
        m = None
        # Python 3.10 introduced switch-case statements, but AFAICT
        # they only support matching static patterns, not regular
        # expression matches.  From an implementation and performance
        # perspective, I understand why this is, but from a source
        # code readability perspective, it's a pity.  Ah well.
        if (m := SOURCE_RE.match(line)) is not None:
            this_elt = [m.group(1),]
            ret_list.append(this_elt)
        elif (m := TIMING_RE.match(line)) is not None:
            this_elt.append(m.group(1))
            this_elt.append(m.group(2))
        elif (m := COMMENT_RE.match(line)) is not None:
            pass
        elif (m := BLANK_LINE_RE.match(line)) is not None:
            pass
        else:
            sys.stderr.write("WARNING: Invalid line seen in input:\n")
            sys.stderr.write(f"        '{line}'\n")
    return ret_list


def main():
    infile_name = None
    try:
        (opts, args) = getopt.getopt(sys.argv[1:], "i:h?",
                                     [ "input=",
                                       "help", 
                                       "usage",
                                     ])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

    for opt, optarg in opts:
        if opt in ("-h", "-?", "--help", "--usage",):
            print(__doc__)
            sys.exit(0)
        elif opt in ("-i", "--input",):
            infile_name = optarg

    if infile_name is None:
        sys.stderr.write("ERROR: Need a file with sources and timings.\n")
        sys.stderr.write("       You probably forgot to use -i / --input.\n")
        sys.exit(1)
        
    schedule = get_schedule(infile_name)

    count = 0
    width = round(math.log(len(schedule), 10))
    for item in schedule:
        count += 1
        source, timing, duration, = item
        output_name = f"{count}-{timing.replace(':', '_')}-{duration}-{os.path.basename(source)}"
        print(f"output: {output_name}")
        # ffmpeg -ss 00:17:51.99 -t 0.68 -i video/2017-02-28-address-joint-session-congress.mp4 -map 0 -c copy tmp.mp4


if __name__ == '__main__':
  main()
